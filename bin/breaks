#!/usr/bin/env fish

# The time spent working, in seconds.
set work_time (math '20 * 60')

# The number of short breaks in an hour, after which a long break should be
# enforced.
set short_break_count (math "3600 / $work_time")

# The short break time, in seconds.
set short_break_time 30

# The long break time, in seconds.
set long_break_time 300

# The number of breaks processed so far.
set breaks 0

# The title to use for break reminder notifications.
set notify_title 'Break reminder'

# The path to the script directory
set project_dir (dirname (dirname (realpath (status --current-filename))))

# The sound to play before starting a break.
set start_sound "$project_dir/audio/start_break.ogg"

function is_locked
    set output (loginctl show-session -p IdleHint --value 2>&1)

    string match -r -q yes $output
end

function timestamp
    date +%s
end

while true
    set start_ticking (timestamp)

    sleep $work_time

    set stop_ticking (timestamp)

    # If the computer is suspended during ticking, we don't want to enforce
    # a break e.g. 10 minutes after waking up. To handle this, we start ticking
    # again if it took too long to complete a work cycle.
    if test (math "$stop_ticking - $start_ticking") -gt (math "$work_time * 2")
        echo 'The computer was likely suspended, restarting the timer'
        set breaks 0
        continue
    end

    # Outside working hours we don't enforce breaks, as I'm moving around
    # anyway.
    set hour (date +'%H')

    if test $hour -ge 18 -o $hour -lt 10
        echo 'Not enforcing a break outside working hours'

        # Reset the breaks counter so that we start from scratch at the start of
        # the day.
        set breaks 0
        continue
    end

    # If Zoom is running, don't enforce breaks. After Zoom no longer runs, we
    # force a break.
    while pgrep ZoomLauncher >/dev/null
        echo 'Waiting for Zoom to close before enforcing a break'
        sleep 60
    end

    # If the screen is locked, I'm probably not behind my computer, so we
    # restart the break cycle.
    if is_locked
        echo 'Screensaver is active, waiting for the screen to be unlocked'
        continue
    end

    # A long break is scheduled every N short breaks, based on the duration of
    # the short breaks.
    if test $breaks -gt 0 && test (math "$breaks % $short_break_count") -eq 0
        set long_break true
    else
        set long_break false
    end

    if test $long_break = true
        set minutes (math "$long_break_time / 60")
        set break_message "Take a break for $minutes minutes"
        set break_time $long_break_time
    else
        set break_time $short_break_time
        set break_message 'Take a 30 second break'
    end

    notify-send -u normal -i media-playback-pause \
        "$notify_title" "$break_message"

    # Break starts
    mpv --really-quiet $start_sound >/dev/null 2>&1
    sleep $break_time
    set breaks (math "$breaks + 1")

    echo 'Break is over, time for work'
end
